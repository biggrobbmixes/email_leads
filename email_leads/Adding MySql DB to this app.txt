To set up a MySQL database for your Django app from the command line and configure it with default tables, follow these steps. This process will cover:

1.Installing MySQL (if necessary).
2.Creating a MySQL database and user.
3.Configuring Django to use the MySQL database.
4.Applying migrations to create default tables.

Step 1: Install MySQL (if not already installed)
If MySQL is not installed on your system, you can install it using the following commands:

On Ubuntu:

bash
Copy code:
sudo apt update
sudo apt install mysql-server
On macOS (using Homebrew):

bash
Copy code:
brew install mysql
On Windows: Download and install MySQL from the official website: MySQL Installer.

Once installed, start the MySQL service:

On Ubuntu:
bash
Copy code:
sudo service mysql start
Step 2: Log in to MySQL and Create a Database and User
Open the MySQL client from the command line:

bash
Copy code:
mysql -u root -p
You'll be prompted for your MySQL root password. Once logged in, you'll see the MySQL shell.

Create a database for your Django app. For example:

sql
Copy code:
CREATE DATABASE email_leads_db CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
Create a user for this database and give it a password (replace password123 with a strong password):

sql
Copy code:
CREATE USER 'email_leads_user'@'localhost' IDENTIFIED BY 'password123';
Grant the user privileges on the database:

sql
Copy code:
GRANT ALL PRIVILEGES ON email_leads_db.* TO 'email_leads_user'@'localhost';
Flush privileges to reload the grant tables:

sql
Copy code:
FLUSH PRIVILEGES;
Exit MySQL:

sql
Copy code:
EXIT;
Step 3: Configure Django to Use the MySQL Database
Open the settings.py file in your Django project (email_leads/email_leads/settings.py).

Locate the DATABASES setting and update it to configure MySQL as the database backend:

python
Copy code:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'email_leads_db',          # The name of the database you created
        'USER': 'email_leads_user',         # The MySQL user you created
        'PASSWORD': 'password123',          # The password you set for the MySQL user
        'HOST': 'localhost',                # Use 'localhost' if running MySQL on the same machine
        'PORT': '3306',                     # Default MySQL port
    }
}
Install the MySQL client for Python. Django uses this library to connect to MySQL:

bash
Copy code:
pip install mysqlclient
If you encounter issues installing mysqlclient, make sure you have the necessary development headers and libraries:

On Ubuntu:

bash
Copy code:
sudo apt-get install python3-dev default-libmysqlclient-dev build-essential
On macOS (Homebrew):

bash
Copy code:
brew install mysql-client
On Windows: Make sure MySQL is properly installed, or you can try installing mysqlclient via pre-built wheels available at https://www.lfd.uci.edu/~gohlke/pythonlibs/#mysqlclient.

Step 4: Apply Migrations to Create Default Tables
Once your database is set up and Django is configured to use MySQL, you need to apply the migrations to create the default tables in your MySQL database.

First, make migrations for your Django app:

bash
Copy code:
python manage.py makemigrations
Then, apply the migrations to create the necessary tables in the MySQL database:

bash
Copy code:
python manage.py migrate
This command will create the default tables required by Django (e.g., authentication, session, and admin tables), as well as any tables youâ€™ve defined in your models.

Step 5: Verify the Database Setup
You can now verify that the tables have been created by logging back into MySQL and listing the tables in your email_leads_db database:

bash
Copy code:
mysql -u email_leads_user -p
Then, inside the MySQL shell, run the following commands:

sql
Copy code:
USE email_leads_db;
SHOW TABLES;
You should see a list of tables, including Django's built-in ones like auth_user, django_session, and any other tables for your app (e.g., investor_app_sometable).

Step 6: Run the Development Server
Now that the MySQL database is set up, you can run the Django development server:

bash
Copy code:
python manage.py runserver
Your Django app is now connected to the MySQL database and ready to use.

Optional: Create a Superuser
You can create a superuser to log into the Django admin by running:

bash
Copy code:
python manage.py createsuperuser
Follow the prompts to set up the username, email, and password.

Recap:
You created a MySQL database and user from the command line.
Configured Django to use the MySQL database in the settings.py file.
Applied the Django migrations to create the default tables in the MySQL database.
Your Django app is now connected to MySQL and ready to run.
Let me know if you run into any issues or need further clarification!